(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{287:function(t,v,_){"use strict";_.r(v);var a=_(13),s=Object(a.a)({},(function(){var t=this,v=t._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"资产子系统"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资产子系统"}},[t._v("#")]),t._v(" 资产子系统")]),t._v(" "),v("p",[t._v("在 LSTGPlus 中，资产的最小组织单位为"),v("strong",[t._v("池")]),t._v("。")]),t._v(" "),v("p",[t._v("默认的，在 Legacy API 中，预定义了两个池供使用："),v("strong",[t._v("全局池")]),t._v("和"),v("strong",[t._v("关卡池")]),t._v("。")]),t._v(" "),v("p",[t._v("通过 API，可以选择卸载某个资产池中所有资产，或者选择在哪个资产池中加载资产（详见 Legacy API 章节）。")]),t._v(" "),v("p",[t._v("资产具有不同的类型，每种类型具有单独的名字空间，具体下述。")]),t._v(" "),v("h2",{attrs:{id:"规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#规则"}},[t._v("#")]),t._v(" 规则")]),t._v(" "),v("h3",{attrs:{id:"资产加载规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资产加载规则"}},[t._v("#")]),t._v(" 资产加载规则")]),t._v(" "),v("p",[t._v("资产加载可以通过一系列内建的 API 完成（详见 Legacy API 章节）。")]),t._v(" "),v("p",[t._v("资产原始文件将通过 VFS 打开，为了方便使用和保持兼容性，我们约定：")]),t._v(" "),v("ul",[v("li",[t._v("如果资产文件路径以"),v("code",[t._v("./")]),t._v("开头，将会从 API 调用方脚本所在路径为相对路径搜索并打开资产文件")]),t._v(" "),v("li",[t._v("其他情况，始终认为资产是从相对于 VFS 中以"),v("code",[t._v("/assets/")]),t._v("为根路径进行寻址的")])]),t._v(" "),v("p",[t._v("例如：")]),t._v(" "),v("div",{staticClass:"language-lua extra-class"},[v("pre",{pre:!0,attrs:{class:"language-lua"}},[v("code",[v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- script/test.lua")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadTexture")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./1.png'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- /assets/script/1.png")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadTexture")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/2.png'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- /assets/2.png")]),t._v("\n"),v("span",{pre:!0,attrs:{class:"token function"}},[t._v("LoadTexture")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),v("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.png'")]),v("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),v("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- /assets/3.png")]),t._v("\n")])])]),v("h3",{attrs:{id:"资产使用规则"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资产使用规则"}},[t._v("#")]),t._v(" 资产使用规则")]),t._v(" "),v("p",[t._v("当一个资产被使用时，LuaSTGPlus 会先从"),v("strong",[t._v("关卡池")]),t._v("寻找资产并加载使用。如果"),v("strong",[t._v("关卡池")]),t._v("中没有找到对应名称的资产，则从"),v("strong",[t._v("全局池")]),t._v("进行查找。")]),t._v(" "),v("h3",{attrs:{id:"错误处理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#错误处理"}},[t._v("#")]),t._v(" 错误处理")]),t._v(" "),v("p",[t._v("为了和异步加载及热更新机制兼容，LuaSTGPlus 将不会在资产不存在的情况下终止流程。")]),t._v(" "),v("p",[t._v("如果发现渲染效果不符合预期等情况，需要开发者及时关注控制台中的报错，以检查资产是否正确加载。")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("TODO")]),t._v(" "),v("p",[t._v("检查资产是否成功加载的能力尚未暴露在 API 中。")])]),t._v(" "),v("h2",{attrs:{id:"资产类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资产类型"}},[t._v("#")]),t._v(" 资产类型")]),t._v(" "),v("p",[t._v("LuaSTGPlus 中定义了如下资产类型：")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("枚举值")]),t._v(" "),v("th",[t._v("描述")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("1")]),t._v(" "),v("td",[t._v("纹理")])]),t._v(" "),v("tr",[v("td",[t._v("2")]),t._v(" "),v("td",[t._v("精灵")])]),t._v(" "),v("tr",[v("td",[t._v("3")]),t._v(" "),v("td",[t._v("动画序列")])]),t._v(" "),v("tr",[v("td",[t._v("4")]),t._v(" "),v("td",[t._v("背景音乐")])]),t._v(" "),v("tr",[v("td",[t._v("5")]),t._v(" "),v("td",[t._v("音效")])]),t._v(" "),v("tr",[v("td",[t._v("6")]),t._v(" "),v("td",[t._v("粒子效果")])]),t._v(" "),v("tr",[v("td",[t._v("7")]),t._v(" "),v("td",[t._v("纹理化字体（亦称为美术字）")])]),t._v(" "),v("tr",[v("td",[t._v("8")]),t._v(" "),v("td",[t._v("TTF矢量字体（亦称为程序字）")])]),t._v(" "),v("tr",[v("td",[t._v("9")]),t._v(" "),v("td",[t._v("Shader 效果")])])])]),t._v(" "),v("h3",{attrs:{id:"纹理"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#纹理"}},[t._v("#")]),t._v(" 纹理")]),t._v(" "),v("p",[t._v("LuaSTGPlus 支持下述纹理格式：")]),t._v(" "),v("ul",[v("li",[t._v("JPEG")]),t._v(" "),v("li",[t._v("PNG")]),t._v(" "),v("li",[t._v("TGA")]),t._v(" "),v("li",[t._v("BMP")]),t._v(" "),v("li",[t._v("PSD")])]),t._v(" "),v("p",[t._v("需要注意每种格式有其支持限制，详见"),v("a",{attrs:{href:"https://github.com/nothings/stb/blob/master/stb_image.h",target:"_blank",rel:"noopener noreferrer"}},[t._v("stb_image"),v("OutboundLink")],1),t._v("。")]),t._v(" "),v("p",[t._v("内部使用上，所有纹理都会被转换为 RGBA32 格式，并被视作 SRGB 色彩空间输入。")]),t._v(" "),v("p",[t._v("此外，我们支持指定纹理的 PPU，以便根据需要调整纹理精度。")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("TODO")]),t._v(" "),v("p",[t._v("指定 PPU 的功能尚未暴露在 API 中。")])]),t._v(" "),v("h4",{attrs:{id:"rendertarget"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#rendertarget"}},[t._v("#")]),t._v(" RenderTarget")]),t._v(" "),v("p",[t._v("LuaSTGPlus 还可以创建一类特殊的纹理，即 RenderTarget，简称 RT。")]),t._v(" "),v("p",[t._v("RT 可以像普通纹理一样被使用，但更主要的是 RT 可以被用作渲染画面的输出。")]),t._v(" "),v("p",[t._v("LuaSTGPlus 目前总是自适应地将 RT 设置为渲染输出分辨率，即总是保持和屏幕大小一致。我们可能在未来版本中增加对自定义 RT 大小的支持。")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),v("p",[t._v("你不能在一次渲染中同时将 RT 作为渲染输出和绘图用的纹理，这会引发未定义的行为。")])]),t._v(" "),v("h3",{attrs:{id:"精灵"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#精灵"}},[t._v("#")]),t._v(" 精灵")]),t._v(" "),v("p",[t._v("LuaSTGPlus 的精灵附带碰撞盒大小定义。")]),t._v(" "),v("p",[t._v("详见"),v("RouterLink",{attrs:{to:"/api/LegacyAPI/BuiltinMethods.html"}},[t._v("Legacy API 文档")]),t._v("。")],1),t._v(" "),v("h3",{attrs:{id:"动画序列"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#动画序列"}},[t._v("#")]),t._v(" 动画序列")]),t._v(" "),v("p",[t._v("LuaSTGPlus 的动画序列附带碰撞盒大小定义。")]),t._v(" "),v("p",[t._v("详见"),v("RouterLink",{attrs:{to:"/api/LegacyAPI/BuiltinMethods.html"}},[t._v("Legacy API 文档")]),t._v("。")],1),t._v(" "),v("h3",{attrs:{id:"背景音乐"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#背景音乐"}},[t._v("#")]),t._v(" 背景音乐")]),t._v(" "),v("p",[t._v("背景音乐将以流的形式进行加载，即在运行时进行解码和格式转换。")]),t._v(" "),v("p",[t._v("当前支持下述类型的音频文件（下同）：")]),t._v(" "),v("ul",[v("li",[t._v("wav")]),t._v(" "),v("li",[t._v("aiff")]),t._v(" "),v("li",[t._v("au")]),t._v(" "),v("li",[t._v("voc")]),t._v(" "),v("li",[t._v("flac")]),t._v(" "),v("li",[t._v("ogg/vorbis")]),t._v(" "),v("li",[t._v("raw")]),t._v(" "),v("li",[t._v("shn")]),t._v(" "),v("li",[t._v("mp3")])]),t._v(" "),v("p",[t._v("详见"),v("RouterLink",{attrs:{to:"/guide/Subsystem/AudioSystem.html"}},[t._v("音频子系统")]),t._v("。")],1),t._v(" "),v("h3",{attrs:{id:"音效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#音效"}},[t._v("#")]),t._v(" 音效")]),t._v(" "),v("p",[t._v("音效将在加载时整个解码为 PCM 数据，因此会占用更多的内存空间。")]),t._v(" "),v("p",[t._v("详见"),v("RouterLink",{attrs:{to:"/guide/Subsystem/AudioSystem.html"}},[t._v("音频子系统")]),t._v("。")],1),t._v(" "),v("h3",{attrs:{id:"粒子效果"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#粒子效果"}},[t._v("#")]),t._v(" 粒子效果")]),t._v(" "),v("p",[t._v("为保证兼容性，粒子效果沿用"),v("code",[t._v("HGE")]),t._v("引擎的粒子效果文件格式和相关逻辑。")]),t._v(" "),v("p",[t._v("当前所有的粒子均在 CPU 侧进行模拟。")]),t._v(" "),v("p",[t._v("此外，为了保证兼容性，默认情况下粒子的发射方向总是与发射器方向相反。")]),t._v(" "),v("h3",{attrs:{id:"纹理化字体"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#纹理化字体"}},[t._v("#")]),t._v(" 纹理化字体")]),t._v(" "),v("p",[t._v("为保证兼容性，纹理化字体沿用"),v("code",[t._v("HGE")]),t._v("引擎所定义的纹理字体格式。")]),t._v(" "),v("p",[t._v("相比较"),v("code",[t._v("HGE")]),t._v("默认的格式，我们允许用户定义以"),v("code",[t._v("UTF-8")]),t._v("编码描述的单个码点，以便对中文进行支持。")]),t._v(" "),v("h3",{attrs:{id:"ttf矢量字体"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#ttf矢量字体"}},[t._v("#")]),t._v(" TTF矢量字体")]),t._v(" "),v("p",[t._v("LuaSTGPlus 使用 FreeType 光栅化矢量字体，因此可以支持 TrueType 和 OpenType 格式定义的字体。")]),t._v(" "),v("p",[t._v("此外我们允许创建"),v("code",[t._v("FontCollection")]),t._v("以便提供字体"),v("code",[t._v("fallback")]),t._v("的能力。")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("TODO")]),t._v(" "),v("p",[t._v("创建 FontCollection 的能力尚未暴露在 API 中。")])]),t._v(" "),v("h3",{attrs:{id:"shader-效果"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#shader-效果"}},[t._v("#")]),t._v(" Shader 效果")]),t._v(" "),v("p",[t._v("从 LuaSTGPlus v2 开始，我们引入了基于 Lua 驱动和定义的 Shader 效果文件格式。")]),t._v(" "),v("p",[t._v("这一格式参考了 FX 的实现，并采用 HLSL 作为基本的语法，配合 Lua 完成效果文件的包装。")]),t._v(" "),v("p",[t._v("详见"),v("RouterLink",{attrs:{to:"/guide/Subsystem/RenderSystem.html"}},[t._v("渲染子系统")]),t._v("。")],1),t._v(" "),v("h2",{attrs:{id:"高级特性"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#高级特性"}},[t._v("#")]),t._v(" 高级特性")]),t._v(" "),v("h3",{attrs:{id:"异步加载"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#异步加载"}},[t._v("#")]),t._v(" 异步加载")]),t._v(" "),v("p",[t._v("LuaSTGPlus 提供异步资产加载的能力。")]),t._v(" "),v("p",[t._v("当启用异步加载时：")]),t._v(" "),v("ul",[v("li",[t._v("资产将会在额外的若干个工作线程加载")]),t._v(" "),v("li",[t._v("当资产未加载时进行使用\n"),v("ul",[v("li",[t._v("对于纹理资产和引用自纹理资产的其他资产类型，会采用内部的占位纹理替代")]),t._v(" "),v("li",[t._v("对于其他资产，将会产生报错")])])])]),t._v(" "),v("p",[t._v("如果平台不支持多线程，则资产只能在主线程上分时间片逐个加载。")]),t._v(" "),v("div",{staticClass:"custom-block warning"},[v("p",{staticClass:"custom-block-title"},[t._v("TODO")]),t._v(" "),v("p",[t._v("检查资产是否完成加载的能力尚未暴露在 API 中。")])]),t._v(" "),v("h3",{attrs:{id:"资产热更新"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#资产热更新"}},[t._v("#")]),t._v(" 资产热更新")]),t._v(" "),v("p",[t._v("当运行在"),v("strong",[t._v("开发模式")]),t._v("、且没有关闭相关功能的情况下，LuaSTGPlus 可以提供资产热更新的功能。")]),t._v(" "),v("p",[t._v("LuaSTGPlus 会在帧更新间隔逐一检查资产是否发生更改。当发生更改时，LuaSTGPlus 会重新触发异步/同步资产加载过程，覆盖原有老的数据。")]),t._v(" "),v("p",[t._v("这一过程原则上对上层逻辑无感知。")])])}),[],!1,null,null,null);v.default=s.exports}}]);