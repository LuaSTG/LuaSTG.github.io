(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{293:function(t,s,a){"use strict";a.r(s);var n=a(13),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"脚本子系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脚本子系统"}},[t._v("#")]),t._v(" 脚本子系统")]),t._v(" "),s("p",[t._v("LuaSTGPlus 采用 luajit/lua51 作为脚本虚拟机，故语言/库标准基于 lua5.1。")]),t._v(" "),s("p",[t._v("脚本中字符串类型采用"),s("code",[t._v("UTF-8")]),t._v("编码，换言之所有脚本以"),s("code",[t._v("UTF-8")]),t._v("进行编码。")]),t._v(" "),s("h2",{attrs:{id:"标准库调整"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准库调整"}},[t._v("#")]),t._v(" 标准库调整")]),t._v(" "),s("p",[t._v("出于跨平台考虑，为了保证各平台行为一致，相比较标准的 lua，我们对库进行了一定调整：")]),t._v(" "),s("ul",[s("li",[t._v("不允许启动外部进程\n"),s("ul",[s("li",[t._v("os.execute 被禁止")]),t._v(" "),s("li",[t._v("io.popen 被禁止")])])]),t._v(" "),s("li",[t._v("标准库函数的 I/O 操作将基于虚拟文件系统进行\n"),s("ul",[s("li",[t._v("os.remove")]),t._v(" "),s("li",[t._v("os.rename")]),t._v(" "),s("li",[t._v("os.tmpname")]),t._v(" "),s("li",[t._v("io.*")]),t._v(" "),s("li",[t._v("loadfile")]),t._v(" "),s("li",[t._v("dofile")]),t._v(" "),s("li",[t._v("require")])])]),t._v(" "),s("li",[t._v("require 现在不允许动态加载外部二进制库")]),t._v(" "),s("li",[t._v("print 除去输出到 stdout，还会转发到日志系统")]),t._v(" "),s("li",[t._v("拉平 luajit/lua51 的差异\n"),s("ul",[s("li",[t._v("luajit\n"),s("ul",[s("li",[t._v("关闭 FFI 支持")])])]),t._v(" "),s("li",[t._v("lua\n"),s("ul",[s("li",[t._v("引入 bit 库")])])])])]),t._v(" "),s("li",[t._v("默认引入下述第三方库\n"),s("ul",[s("li",[t._v("cjson")]),t._v(" "),s("li",[t._v("lfs（基于 VFS 的兼容实现）")])])])]),t._v(" "),s("h2",{attrs:{id:"沙箱与热更新机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#沙箱与热更新机制"}},[t._v("#")]),t._v(" 沙箱与热更新机制")]),t._v(" "),s("h3",{attrs:{id:"沙箱模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#沙箱模式"}},[t._v("#")]),t._v(" 沙箱模式")]),t._v(" "),s("p",[t._v("为了方便快速开发迭代，我们在 LuaSTGPlus 中引入了沙箱和热更新机制。")]),t._v(" "),s("p",[t._v("在沙箱模式下，"),s("strong",[t._v("脚本文件会形成独立的执行环境")]),t._v("，在脚本文件中定义的任意全局方法将仅存在于该文件的环境中，例如：")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 1.lua")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- function")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 2.lua")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- nil")]),t._v("\n")])])]),s("p",[t._v("如果你希望将方法定义到全局环境中，需要显式进行定义：")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 1.lua")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" _G"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("foo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- function")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 2.lua")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("print")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("type")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("foo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- function")]),t._v("\n")])])]),s("p",[t._v("使用"),s("code",[t._v("import")]),t._v("方法来以沙箱模式加载脚本文件。")]),t._v(" "),s("div",{staticClass:"language-lua extra-class"},[s("pre",{pre:!0,attrs:{class:"language-lua"}},[s("code",[t._v("a "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("import")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1.lua"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("此时，"),s("code",[t._v("import")]),t._v("的返回值即为脚本的执行环境。通过这一方法可以访问其他脚本中所定义的值。")]),t._v(" "),s("p",[t._v("需要注意，脚本文件会在第一次"),s("code",[t._v("import")]),t._v("时被执行，往后相同文件不会再被加载，而是直接返回之前创建的执行环境。")]),t._v(" "),s("p",[t._v("综上，相比较"),s("code",[t._v("require")]),t._v("加载，区别如下：")]),t._v(" "),s("ul",[s("li",[t._v("方法默认定义在脚本独立的环境中而不是全局环境中")]),t._v(" "),s("li",[s("code",[t._v("require")]),t._v("返回脚本执行结果，"),s("code",[t._v("import")]),t._v("返回脚本执行环境")])]),t._v(" "),s("div",{staticClass:"custom-block warning"},[s("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),s("p",[s("code",[t._v("require")]),t._v("和"),s("code",[t._v("import")]),t._v("为两套独立机制，互相不干扰，但是不推荐混合使用。")])]),t._v(" "),s("h3",{attrs:{id:"热更新机制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#热更新机制"}},[t._v("#")]),t._v(" 热更新机制")]),t._v(" "),s("p",[t._v("我们在沙箱模式基础上建立起热更新机制。")]),t._v(" "),s("p",[t._v("脚本子系统会在帧更新期间自动检查脚本文件是否发生过修改，如果发生过修改，脚本子系统会自动重新加载文件并执行。")]),t._v(" "),s("p",[t._v("通过这种机制，脚本中定义的方法将得以重新覆盖原始定义，从而达到热更新的效果。")]),t._v(" "),s("p",[t._v("需要注意的是，脚本在重新执行时，原有的执行环境不会被清空，因此可以通过判空的方式检查原有变量是否存在。")]),t._v(" "),s("p",[t._v("此外，热更新仅在"),s("strong",[t._v("开发模式")]),t._v("下生效。")])])}),[],!1,null,null,null);s.default=e.exports}}]);