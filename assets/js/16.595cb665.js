(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{282:function(t,e,a){"use strict";a.r(e);var r=a(13),_=Object(r.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"内建类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#内建类型"}},[t._v("#")]),t._v(" 内建类型")]),t._v(" "),e("p",[t._v("内建类型的构造方法参考"),e("RouterLink",{attrs:{to:"/api/LegacyAPI/BuiltinMethods.html#杂项"}},[t._v("杂项")]),t._v("。")],1),t._v(" "),e("h2",{attrs:{id:"lstgcolor"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lstgcolor"}},[t._v("#")]),t._v(" LSTGColor")]),t._v(" "),e("p",[e("code",[t._v("LSTGColor")]),t._v(" 用于表示一个基于 a, r, g, b 四分量的 32 bit 颜色值。")]),t._v(" "),e("h3",{attrs:{id:"成员方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员方法"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),e("h4",{attrs:{id:"argb"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#argb"}},[t._v("#")]),t._v(" ARGB")]),t._v(" "),e("p",[t._v("返回颜色分量。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("ARGB(self: LSTGColor): number, number, number, number")])]),t._v(" "),e("li",[t._v("返回值：a, r, g, b 分量")])]),t._v(" "),e("h3",{attrs:{id:"元方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元方法"}},[t._v("#")]),t._v(" 元方法")]),t._v(" "),e("h4",{attrs:{id:"eq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#eq"}},[t._v("#")]),t._v(" __eq")]),t._v(" "),e("p",[t._v("判断两个颜色值是否相等。")]),t._v(" "),e("h4",{attrs:{id:"add"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#add"}},[t._v("#")]),t._v(" __add")]),t._v(" "),e("p",[t._v("将两个颜色值相加，超出部分置为255。")]),t._v(" "),e("h4",{attrs:{id:"sub"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sub"}},[t._v("#")]),t._v(" __sub")]),t._v(" "),e("p",[t._v("将两个颜色值相减，下溢部分置为0。")]),t._v(" "),e("h4",{attrs:{id:"mul"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#mul"}},[t._v("#")]),t._v(" __mul")]),t._v(" "),e("p",[t._v("将两个颜色值的各个分量相乘或与一个数字相乘，超出部分置为255。")]),t._v(" "),e("h4",{attrs:{id:"tostring"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" __tostring")]),t._v(" "),e("p",[t._v("打印类名，该值为"),e("code",[t._v("lstg.Color(a,r,g,b)")]),t._v("。其中 a, r, g, b 为颜色分量值。")]),t._v(" "),e("h2",{attrs:{id:"lstgrandomizer"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lstgrandomizer"}},[t._v("#")]),t._v(" LSTGRandomizer")]),t._v(" "),e("p",[t._v("随机数发生器。")]),t._v(" "),e("h3",{attrs:{id:"成员方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员方法-2"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),e("h4",{attrs:{id:"seed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#seed"}},[t._v("#")]),t._v(" Seed")]),t._v(" "),e("p",[t._v("设置随机数种子。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Seed(self: LSTGRandomizer, value: number)")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("value：种子")])])])]),t._v(" "),e("h4",{attrs:{id:"getseed"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#getseed"}},[t._v("#")]),t._v(" GetSeed")]),t._v(" "),e("p",[t._v("获取随机数种子。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("GetSeed(self: LSTGRandomizer): number")])]),t._v(" "),e("li",[t._v("返回值：随机数种子")])]),t._v(" "),e("h4",{attrs:{id:"int"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#int"}},[t._v("#")]),t._v(" Int")]),t._v(" "),e("p",[t._v("返回 [lower, upper] 上的整数随机数。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Int(self: LSTGRandomizer, lower: number, upper: number): number")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("lower：下界")]),t._v(" "),e("li",[t._v("upper：上界")])])]),t._v(" "),e("li",[t._v("返回值：随机整数")])]),t._v(" "),e("h4",{attrs:{id:"float"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#float"}},[t._v("#")]),t._v(" Float")]),t._v(" "),e("p",[t._v("返回 [lower, upper) 上的浮点随机数。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Float(self: LSTGRandomizer, lower: number, upper: number): number")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("lower：下界")]),t._v(" "),e("li",[t._v("upper：上界")])])]),t._v(" "),e("li",[t._v("返回值：随机浮点数")])]),t._v(" "),e("h4",{attrs:{id:"sign"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#sign"}},[t._v("#")]),t._v(" Sign")]),t._v(" "),e("p",[t._v("返回 -1 或者 +1。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Sign(self: LSTGRandomizer): number")])]),t._v(" "),e("li",[t._v("返回值：正负 1。")])]),t._v(" "),e("h3",{attrs:{id:"元方法-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元方法-2"}},[t._v("#")]),t._v(" 元方法")]),t._v(" "),e("h4",{attrs:{id:"tostring-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring-2"}},[t._v("#")]),t._v(" __tostring")]),t._v(" "),e("p",[t._v("总是返回"),e("code",[t._v("lstgRandomizer")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"lstgbentlaserdata"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#lstgbentlaserdata"}},[t._v("#")]),t._v(" LSTGBentLaserData")]),t._v(" "),e("p",[t._v("曲线激光。")]),t._v(" "),e("h3",{attrs:{id:"成员方法-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#成员方法-3"}},[t._v("#")]),t._v(" 成员方法")]),t._v(" "),e("h4",{attrs:{id:"update"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#update"}},[t._v("#")]),t._v(" Update")]),t._v(" "),e("p",[t._v("更新对象。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Update(self: LSTGBentLaserData, length: number, width: number)")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("length：节点数")]),t._v(" "),e("li",[t._v("width：曲光宽度（影响碰撞）")])])])]),t._v(" "),e("h4",{attrs:{id:"release"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#release"}},[t._v("#")]),t._v(" Release "),e("Badge",{attrs:{type:"warning",vertical:"middle",text:"deprecated"}})],1),t._v(" "),e("p",[t._v("释放对象。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),e("p",[t._v("该方法已废弃，不再有任何效果。")])]),t._v(" "),e("h4",{attrs:{id:"render"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#render"}},[t._v("#")]),t._v(" Render")]),t._v(" "),e("p",[t._v("渲染对象。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("Render(self: LSTGBentLaserData, texture: string, blend: string, color: LSTGColor, texLeft: number, texTop: number, texWidth: number, texHeight: number, scale?: number)")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("texture：用于填充曲光的纹理")]),t._v(" "),e("li",[t._v("blend：混合模式，详见"),e("RouterLink",{attrs:{to:"/guide/Subsystem/RenderSystem.html#混合选项"}},[t._v("混合选项")])],1),t._v(" "),e("li",[t._v("color：混合颜色")]),t._v(" "),e("li",[t._v("texLeft：距离纹理左边的距离（受 PPU 影响）")]),t._v(" "),e("li",[t._v("texTop：距离纹理顶边的距离（受 PPU 影响）")]),t._v(" "),e("li",[t._v("texWidth：纹理宽度（受 PPU 影响）")]),t._v(" "),e("li",[t._v("texHeight：纹理高度（受 PPU 影响）")]),t._v(" "),e("li",[t._v("scale：缩放，默认为 1")])])])]),t._v(" "),e("h4",{attrs:{id:"collisioncheck"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#collisioncheck"}},[t._v("#")]),t._v(" CollisionCheck")]),t._v(" "),e("p",[t._v("执行碰撞检查。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("CollisionCheck(self: LSTGBentLaserData, x: number, y: number, rot?: number, a?: number, b?: number, rect?: boolean): boolean")])]),t._v(" "),e("li",[t._v("参数\n"),e("ul",[e("li",[t._v("x：被检查的对象坐标 X")]),t._v(" "),e("li",[t._v("y：被检查的对象坐标 Y")]),t._v(" "),e("li",[t._v("rot：被检查的对象旋转")]),t._v(" "),e("li",[t._v("a：被检查的对象碰撞盒横向半长")]),t._v(" "),e("li",[t._v("b：被检查的对象碰撞盒纵向半长")]),t._v(" "),e("li",[t._v("rect：被检查对象的碰撞盒是否是矩形")])])]),t._v(" "),e("li",[t._v("返回值：是否发生碰撞")])]),t._v(" "),e("h4",{attrs:{id:"boundcheck"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#boundcheck"}},[t._v("#")]),t._v(" BoundCheck")]),t._v(" "),e("p",[t._v("检查曲线激光是否还在范围内。")]),t._v(" "),e("ul",[e("li",[t._v("签名："),e("code",[t._v("BoundCheck(self: LSTGBentLaserData): boolean")])]),t._v(" "),e("li",[t._v("返回值：true 还在边界内，false 提示越界。")])]),t._v(" "),e("h3",{attrs:{id:"元方法-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#元方法-3"}},[t._v("#")]),t._v(" 元方法")]),t._v(" "),e("h4",{attrs:{id:"tostring-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tostring-3"}},[t._v("#")]),t._v(" __tostring")]),t._v(" "),e("p",[t._v("总是返回"),e("code",[t._v("lstgBentLaserData")]),t._v("。")])])}),[],!1,null,null,null);e.default=_.exports}}]);